//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool.
// Code is generated on: 10/24/2020 23:55:11
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using System.Data;
using System.ComponentModel;
using System.Collections.Generic;
using System.Reflection;
using System.Linq;
using System.Linq.Expressions;

namespace DataContext
{

    [System.Data.Linq.Mapping.DatabaseAttribute(Name = "SCHOOL")]
    [ProviderAttribute(typeof(Devart.Data.Oracle.Linq.Provider.OracleDataProvider))]
    public partial class SchoolDataContext : Devart.Data.Linq.DataContext
    {
        private static System.Data.Linq.Mapping.MappingSource mappingSource = new Devart.Data.Linq.Mapping.AttributeMappingSource();
        public static Devart.Data.Linq.CompiledQueryCache compiledQueryCache = Devart.Data.Linq.CompiledQueryCache.RegisterDataContext(typeof(SchoolDataContext));

        #region Extensibility Method Definitions
    
        partial void OnCreated();
        partial void OnSubmitError(Devart.Data.Linq.SubmitErrorEventArgs args);

        partial void InsertAlumno(Alumno instance);
        partial void UpdateAlumno(Alumno instance);
        partial void DeleteAlumno(Alumno instance);
        partial void InsertAsignatura(Asignatura instance);
        partial void UpdateAsignatura(Asignatura instance);
        partial void DeleteAsignatura(Asignatura instance);
        partial void InsertEvaluacion(Evaluacion instance);
        partial void UpdateEvaluacion(Evaluacion instance);
        partial void DeleteEvaluacion(Evaluacion instance);
        partial void InsertNota(Nota instance);
        partial void UpdateNota(Nota instance);
        partial void DeleteNota(Nota instance);
        partial void InsertProfesor(Profesor instance);
        partial void UpdateProfesor(Profesor instance);
        partial void DeleteProfesor(Profesor instance);
        partial void InsertMateria(Materia instance);
        partial void UpdateMateria(Materia instance);
        partial void DeleteMateria(Materia instance);

        #endregion

        public SchoolDataContext() :
        base(@"User Id=school;Password=orac;Server=localhost;Persist Security Info=True", mappingSource)
        {
            OnCreated();
        }

        public SchoolDataContext(string connection) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public SchoolDataContext(System.Data.IDbConnection connection) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public SchoolDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public SchoolDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public Devart.Data.Linq.Table<Alumno> Alumnos
        {
            get
            {
                return this.GetTable<Alumno>();
            }
        }

        public Devart.Data.Linq.Table<Asignatura> Asignaturas
        {
            get
            {
                return this.GetTable<Asignatura>();
            }
        }

        public Devart.Data.Linq.Table<Evaluacion> Evaluacions
        {
            get
            {
                return this.GetTable<Evaluacion>();
            }
        }

        public Devart.Data.Linq.Table<Nota> Notas
        {
            get
            {
                return this.GetTable<Nota>();
            }
        }

        public Devart.Data.Linq.Table<Profesor> Profesors
        {
            get
            {
                return this.GetTable<Profesor>();
            }
        }

        public Devart.Data.Linq.Table<Materia> Materias
        {
            get
            {
                return this.GetTable<Materia>();
            }
        }
    }


    /// <summary>
    /// There are no comments for Alumno in the schema.
    /// </summary>
    [Table(Name = @"SCHOOL.ALUMNO")]
    public partial class Alumno : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);

        private string _Cedula;

        private string _Nombres;

        private string _Direccion;

        private string _Telefono;

        private EntitySet<Asignatura> _Asignaturas;

        private EntitySet<Nota> _Notas;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnCedulaChanging(string value);
        partial void OnCedulaChanged();
        partial void OnNombresChanging(string value);
        partial void OnNombresChanged();
        partial void OnDireccionChanging(string value);
        partial void OnDireccionChanged();
        partial void OnTelefonoChanging(string value);
        partial void OnTelefonoChanged();
        #endregion

        public Alumno()
        {
            this._Asignaturas = new EntitySet<Asignatura>(new Action<Asignatura>(this.attach_Asignaturas), new Action<Asignatura>(this.detach_Asignaturas));
            this._Notas = new EntitySet<Nota>(new Action<Nota>(this.attach_Notas), new Action<Nota>(this.detach_Notas));
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for Cedula in the schema.
        /// </summary>
        [Column(Name = @"CEDULA", Storage = "_Cedula", CanBeNull = false, DbType = "VARCHAR2(13) NOT NULL", IsPrimaryKey = true)]
        public string Cedula
        {
            get
            {
                return this._Cedula;
            }
            set
            {
                if (this._Cedula != value)
                {
                    this.OnCedulaChanging(value);
                    this.SendPropertyChanging();
                    this._Cedula = value;
                    this.SendPropertyChanged("Cedula");
                    this.OnCedulaChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Nombres in the schema.
        /// </summary>
        [Column(Name = @"NOMBRES", Storage = "_Nombres", DbType = "VARCHAR2(128) NULL")]
        public string Nombres
        {
            get
            {
                return this._Nombres;
            }
            set
            {
                if (this._Nombres != value)
                {
                    this.OnNombresChanging(value);
                    this.SendPropertyChanging();
                    this._Nombres = value;
                    this.SendPropertyChanged("Nombres");
                    this.OnNombresChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Direccion in the schema.
        /// </summary>
        [Column(Name = @"DIRECCION", Storage = "_Direccion", DbType = "VARCHAR2(128) NULL")]
        public string Direccion
        {
            get
            {
                return this._Direccion;
            }
            set
            {
                if (this._Direccion != value)
                {
                    this.OnDireccionChanging(value);
                    this.SendPropertyChanging();
                    this._Direccion = value;
                    this.SendPropertyChanged("Direccion");
                    this.OnDireccionChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Telefono in the schema.
        /// </summary>
        [Column(Name = @"TELEFONO", Storage = "_Telefono", DbType = "VARCHAR2(15) NULL")]
        public string Telefono
        {
            get
            {
                return this._Telefono;
            }
            set
            {
                if (this._Telefono != value)
                {
                    this.OnTelefonoChanging(value);
                    this.SendPropertyChanging();
                    this._Telefono = value;
                    this.SendPropertyChanged("Telefono");
                    this.OnTelefonoChanged();
                }
            }
        }

        [Devart.Data.Linq.Mapping.Association(Name="Alumno_Asignatura", Storage="_Asignaturas", OtherKey="AlumnoDni")]
        public EntitySet<Asignatura> Asignaturas
        {
            get
            {
                return this._Asignaturas;
            }
            set
            {
                this._Asignaturas.Assign(value);
            }
        }

        [Devart.Data.Linq.Mapping.Association(Name="Alumno_Nota", Storage="_Notas", OtherKey="AlumnoCedula")]
        public EntitySet<Nota> Notas
        {
            get
            {
                return this._Notas;
            }
            set
            {
                this._Notas.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_Asignaturas(Asignatura entity)
        {
            this.SendPropertyChanging("Asignaturas");
            entity.Alumno = this;
        }
    
        private void detach_Asignaturas(Asignatura entity)
        {
            this.SendPropertyChanging("Asignaturas");
            entity.Alumno = null;
        }

        private void attach_Notas(Nota entity)
        {
            this.SendPropertyChanging("Notas");
            entity.Alumno = this;
        }
    
        private void detach_Notas(Nota entity)
        {
            this.SendPropertyChanging("Notas");
            entity.Alumno = null;
        }
    }


    /// <summary>
    /// There are no comments for Asignatura in the schema.
    /// </summary>
    [Table(Name = @"SCHOOL.ASIGNATURA")]
    public partial class Asignatura : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);

        private string _AlumnoDni;

        private string _ProfesorDni;

        private decimal _Id;

        private string _MateriaCod;

        private double _Tareas;

        private double _Examen;

        private EntityRef<Alumno> _Alumno;

        private EntityRef<Profesor> _Profesor;

        private EntityRef<Materia> _Materia;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnAlumnoDniChanging(string value);
        partial void OnAlumnoDniChanged();
        partial void OnProfesorDniChanging(string value);
        partial void OnProfesorDniChanged();
        partial void OnIdChanging(decimal value);
        partial void OnIdChanged();
        partial void OnMateriaCodChanging(string value);
        partial void OnMateriaCodChanged();
        partial void OnTareasChanging(double value);
        partial void OnTareasChanged();
        partial void OnExamenChanging(double value);
        partial void OnExamenChanged();
        #endregion

        public Asignatura()
        {
            this._Alumno  = default(EntityRef<Alumno>);
            this._Profesor  = default(EntityRef<Profesor>);
            this._Materia  = default(EntityRef<Materia>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for AlumnoDni in the schema.
        /// </summary>
        [Column(Name = @"ALUMNO_DNI", Storage = "_AlumnoDni", CanBeNull = false, DbType = "VARCHAR2(15) NOT NULL")]
        public string AlumnoDni
        {
            get
            {
                return this._AlumnoDni;
            }
            set
            {
                if (this._AlumnoDni != value)
                {
                    if (this._Alumno.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnAlumnoDniChanging(value);
                    this.SendPropertyChanging();
                    this._AlumnoDni = value;
                    this.SendPropertyChanged("AlumnoDni");
                    this.OnAlumnoDniChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ProfesorDni in the schema.
        /// </summary>
        [Column(Name = @"PROFESOR_DNI", Storage = "_ProfesorDni", CanBeNull = false, DbType = "VARCHAR2(15) NOT NULL")]
        public string ProfesorDni
        {
            get
            {
                return this._ProfesorDni;
            }
            set
            {
                if (this._ProfesorDni != value)
                {
                    if (this._Profesor.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnProfesorDniChanging(value);
                    this.SendPropertyChanging();
                    this._ProfesorDni = value;
                    this.SendPropertyChanged("ProfesorDni");
                    this.OnProfesorDniChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Id in the schema.
        /// </summary>
        [Column(Name = @"ID", Storage = "_Id", CanBeNull = false, DbType = "NUMBER NOT NULL", IsPrimaryKey = true)]
        public decimal Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if (this._Id != value)
                {
                    this.OnIdChanging(value);
                    this.SendPropertyChanging();
                    this._Id = value;
                    this.SendPropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for MateriaCod in the schema.
        /// </summary>
        [Column(Name = @"MATERIA_COD", Storage = "_MateriaCod", CanBeNull = false, DbType = "VARCHAR2(16) NOT NULL")]
        public string MateriaCod
        {
            get
            {
                return this._MateriaCod;
            }
            set
            {
                if (this._MateriaCod != value)
                {
                    if (this._Materia.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnMateriaCodChanging(value);
                    this.SendPropertyChanging();
                    this._MateriaCod = value;
                    this.SendPropertyChanged("MateriaCod");
                    this.OnMateriaCodChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Tareas in the schema.
        /// </summary>
        [Column(Name = @"TAREAS", Storage = "_Tareas", CanBeNull = false, DbType = "NUMBER(4,2) NOT NULL")]
        public double Tareas
        {
            get
            {
                return this._Tareas;
            }
            set
            {
                if (this._Tareas != value)
                {
                    this.OnTareasChanging(value);
                    this.SendPropertyChanging();
                    this._Tareas = value;
                    this.SendPropertyChanged("Tareas");
                    this.OnTareasChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Examen in the schema.
        /// </summary>
        [Column(Name = @"EXAMEN", Storage = "_Examen", CanBeNull = false, DbType = "NUMBER(4,2) NOT NULL")]
        public double Examen
        {
            get
            {
                return this._Examen;
            }
            set
            {
                if (this._Examen != value)
                {
                    this.OnExamenChanging(value);
                    this.SendPropertyChanging();
                    this._Examen = value;
                    this.SendPropertyChanged("Examen");
                    this.OnExamenChanged();
                }
            }
        }

        [Devart.Data.Linq.Mapping.Association(Name="Alumno_Asignatura", Storage="_Alumno", ThisKey="AlumnoDni", IsForeignKey=true)]
        public Alumno Alumno
        {
            get
            {
                return this._Alumno.Entity;
            }
            set
            {
                Alumno previousValue = this._Alumno.Entity;
                if ((previousValue != value) || (this._Alumno.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._Alumno.Entity = null;
                        previousValue.Asignaturas.Remove(this);
                    }
                    this._Alumno.Entity = value;
                    if (value != null)
                    {
                        this._AlumnoDni = value.Cedula;
                        value.Asignaturas.Add(this);
                    }
                    else
                    {
                        this._AlumnoDni = default(string);
                    }
                    this.SendPropertyChanged("Alumno");
                }
            }
        }

        [Devart.Data.Linq.Mapping.Association(Name="Profesor_Asignatura", Storage="_Profesor", ThisKey="ProfesorDni", IsForeignKey=true)]
        public Profesor Profesor
        {
            get
            {
                return this._Profesor.Entity;
            }
            set
            {
                Profesor previousValue = this._Profesor.Entity;
                if ((previousValue != value) || (this._Profesor.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._Profesor.Entity = null;
                        previousValue.Asignaturas.Remove(this);
                    }
                    this._Profesor.Entity = value;
                    if (value != null)
                    {
                        this._ProfesorDni = value.Cedula;
                        value.Asignaturas.Add(this);
                    }
                    else
                    {
                        this._ProfesorDni = default(string);
                    }
                    this.SendPropertyChanged("Profesor");
                }
            }
        }

        [Devart.Data.Linq.Mapping.Association(Name="Materia_Asignatura", Storage="_Materia", ThisKey="MateriaCod", IsForeignKey=true)]
        public Materia Materia
        {
            get
            {
                return this._Materia.Entity;
            }
            set
            {
                Materia previousValue = this._Materia.Entity;
                if ((previousValue != value) || (this._Materia.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._Materia.Entity = null;
                        previousValue.Asignaturas.Remove(this);
                    }
                    this._Materia.Entity = value;
                    if (value != null)
                    {
                        this._MateriaCod = value.Codigo;
                        value.Asignaturas.Add(this);
                    }
                    else
                    {
                        this._MateriaCod = default(string);
                    }
                    this.SendPropertyChanged("Materia");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }


    /// <summary>
    /// There are no comments for Evaluacion in the schema.
    /// </summary>
    [Table(Name = @"SCHOOL.EVALUACION")]
    public partial class Evaluacion : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);

        private decimal _Id;

        private string _Evaluacion1;

        private string _CodigoMateria;

        private EntitySet<Nota> _Notas;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(decimal value);
        partial void OnIdChanged();
        partial void OnEvaluacion1Changing(string value);
        partial void OnEvaluacion1Changed();
        partial void OnCodigoMateriaChanging(string value);
        partial void OnCodigoMateriaChanged();
        #endregion

        public Evaluacion()
        {
            this._Notas = new EntitySet<Nota>(new Action<Nota>(this.attach_Notas), new Action<Nota>(this.detach_Notas));
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for Id in the schema.
        /// </summary>
        [Column(Name = @"ID", Storage = "_Id", CanBeNull = false, DbType = "NUMBER NOT NULL", IsPrimaryKey = true)]
        public decimal Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if (this._Id != value)
                {
                    this.OnIdChanging(value);
                    this.SendPropertyChanging();
                    this._Id = value;
                    this.SendPropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Evaluacion1 in the schema.
        /// </summary>
        [Column(Name = @"EVALUACION", Storage = "_Evaluacion1", DbType = "VARCHAR2(64) NULL")]
        public string Evaluacion1
        {
            get
            {
                return this._Evaluacion1;
            }
            set
            {
                if (this._Evaluacion1 != value)
                {
                    this.OnEvaluacion1Changing(value);
                    this.SendPropertyChanging();
                    this._Evaluacion1 = value;
                    this.SendPropertyChanged("Evaluacion1");
                    this.OnEvaluacion1Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CodigoMateria in the schema.
        /// </summary>
        [Column(Name = @"CODIGO_MATERIA", Storage = "_CodigoMateria", CanBeNull = false, DbType = "VARCHAR2(64) NOT NULL")]
        public string CodigoMateria
        {
            get
            {
                return this._CodigoMateria;
            }
            set
            {
                if (this._CodigoMateria != value)
                {
                    this.OnCodigoMateriaChanging(value);
                    this.SendPropertyChanging();
                    this._CodigoMateria = value;
                    this.SendPropertyChanged("CodigoMateria");
                    this.OnCodigoMateriaChanged();
                }
            }
        }

        [Devart.Data.Linq.Mapping.Association(Name="Evaluacion_Nota", Storage="_Notas", OtherKey="EvaluacionId")]
        public EntitySet<Nota> Notas
        {
            get
            {
                return this._Notas;
            }
            set
            {
                this._Notas.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_Notas(Nota entity)
        {
            this.SendPropertyChanging("Notas");
            entity.Evaluacion = this;
        }
    
        private void detach_Notas(Nota entity)
        {
            this.SendPropertyChanging("Notas");
            entity.Evaluacion = null;
        }
    }


    /// <summary>
    /// There are no comments for Nota in the schema.
    /// </summary>
    [Table(Name = @"SCHOOL.NOTAS")]
    public partial class Nota : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);

        private decimal _Id;

        private System.Nullable<decimal> _EvaluacionId;

        private string _AlumnoCedula;

        private EntityRef<Alumno> _Alumno;

        private EntityRef<Evaluacion> _Evaluacion;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(decimal value);
        partial void OnIdChanged();
        partial void OnEvaluacionIdChanging(System.Nullable<decimal> value);
        partial void OnEvaluacionIdChanged();
        partial void OnAlumnoCedulaChanging(string value);
        partial void OnAlumnoCedulaChanged();
        #endregion

        public Nota()
        {
            this._Alumno  = default(EntityRef<Alumno>);
            this._Evaluacion  = default(EntityRef<Evaluacion>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for Id in the schema.
        /// </summary>
        [Column(Name = @"ID", Storage = "_Id", CanBeNull = false, DbType = "NUMBER NOT NULL", IsPrimaryKey = true)]
        public decimal Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if (this._Id != value)
                {
                    this.OnIdChanging(value);
                    this.SendPropertyChanging();
                    this._Id = value;
                    this.SendPropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for EvaluacionId in the schema.
        /// </summary>
        [Column(Name = @"EVALUACION_ID", Storage = "_EvaluacionId", DbType = "NUMBER NULL")]
        public System.Nullable<decimal> EvaluacionId
        {
            get
            {
                return this._EvaluacionId;
            }
            set
            {
                if (this._EvaluacionId != value)
                {
                    if (this._Evaluacion.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnEvaluacionIdChanging(value);
                    this.SendPropertyChanging();
                    this._EvaluacionId = value;
                    this.SendPropertyChanged("EvaluacionId");
                    this.OnEvaluacionIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for AlumnoCedula in the schema.
        /// </summary>
        [Column(Name = @"ALUMNO_CEDULA", Storage = "_AlumnoCedula", DbType = "VARCHAR2(15) NULL")]
        public string AlumnoCedula
        {
            get
            {
                return this._AlumnoCedula;
            }
            set
            {
                if (this._AlumnoCedula != value)
                {
                    if (this._Alumno.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnAlumnoCedulaChanging(value);
                    this.SendPropertyChanging();
                    this._AlumnoCedula = value;
                    this.SendPropertyChanged("AlumnoCedula");
                    this.OnAlumnoCedulaChanged();
                }
            }
        }

        [Devart.Data.Linq.Mapping.Association(Name="Alumno_Nota", Storage="_Alumno", ThisKey="AlumnoCedula", IsForeignKey=true)]
        public Alumno Alumno
        {
            get
            {
                return this._Alumno.Entity;
            }
            set
            {
                Alumno previousValue = this._Alumno.Entity;
                if ((previousValue != value) || (this._Alumno.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._Alumno.Entity = null;
                        previousValue.Notas.Remove(this);
                    }
                    this._Alumno.Entity = value;
                    if (value != null)
                    {
                        this._AlumnoCedula = value.Cedula;
                        value.Notas.Add(this);
                    }
                    else
                    {
                        this._AlumnoCedula = default(string);
                    }
                    this.SendPropertyChanged("Alumno");
                }
            }
        }

        [Devart.Data.Linq.Mapping.Association(Name="Evaluacion_Nota", Storage="_Evaluacion", ThisKey="EvaluacionId", IsForeignKey=true)]
        public Evaluacion Evaluacion
        {
            get
            {
                return this._Evaluacion.Entity;
            }
            set
            {
                Evaluacion previousValue = this._Evaluacion.Entity;
                if ((previousValue != value) || (this._Evaluacion.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._Evaluacion.Entity = null;
                        previousValue.Notas.Remove(this);
                    }
                    this._Evaluacion.Entity = value;
                    if (value != null)
                    {
                        this._EvaluacionId = value.Id;
                        value.Notas.Add(this);
                    }
                    else
                    {
                        this._EvaluacionId = default(System.Nullable<decimal>);
                    }
                    this.SendPropertyChanged("Evaluacion");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }


    /// <summary>
    /// There are no comments for Profesor in the schema.
    /// </summary>
    [Table(Name = @"SCHOOL.PROFESOR")]
    public partial class Profesor : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);

        private string _Cedula;

        private string _Nombres;

        private string _Telefono;

        private EntitySet<Asignatura> _Asignaturas;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnCedulaChanging(string value);
        partial void OnCedulaChanged();
        partial void OnNombresChanging(string value);
        partial void OnNombresChanged();
        partial void OnTelefonoChanging(string value);
        partial void OnTelefonoChanged();
        #endregion

        public Profesor()
        {
            this._Asignaturas = new EntitySet<Asignatura>(new Action<Asignatura>(this.attach_Asignaturas), new Action<Asignatura>(this.detach_Asignaturas));
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for Cedula in the schema.
        /// </summary>
        [Column(Name = @"CEDULA", Storage = "_Cedula", CanBeNull = false, DbType = "VARCHAR2(15) NOT NULL", IsPrimaryKey = true)]
        public string Cedula
        {
            get
            {
                return this._Cedula;
            }
            set
            {
                if (this._Cedula != value)
                {
                    this.OnCedulaChanging(value);
                    this.SendPropertyChanging();
                    this._Cedula = value;
                    this.SendPropertyChanged("Cedula");
                    this.OnCedulaChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Nombres in the schema.
        /// </summary>
        [Column(Name = @"NOMBRES", Storage = "_Nombres", DbType = "VARCHAR2(128) NULL")]
        public string Nombres
        {
            get
            {
                return this._Nombres;
            }
            set
            {
                if (this._Nombres != value)
                {
                    this.OnNombresChanging(value);
                    this.SendPropertyChanging();
                    this._Nombres = value;
                    this.SendPropertyChanged("Nombres");
                    this.OnNombresChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Telefono in the schema.
        /// </summary>
        [Column(Name = @"TELEFONO", Storage = "_Telefono", DbType = "VARCHAR2(15) NULL")]
        public string Telefono
        {
            get
            {
                return this._Telefono;
            }
            set
            {
                if (this._Telefono != value)
                {
                    this.OnTelefonoChanging(value);
                    this.SendPropertyChanging();
                    this._Telefono = value;
                    this.SendPropertyChanged("Telefono");
                    this.OnTelefonoChanged();
                }
            }
        }

        [Devart.Data.Linq.Mapping.Association(Name="Profesor_Asignatura", Storage="_Asignaturas", OtherKey="ProfesorDni")]
        public EntitySet<Asignatura> Asignaturas
        {
            get
            {
                return this._Asignaturas;
            }
            set
            {
                this._Asignaturas.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_Asignaturas(Asignatura entity)
        {
            this.SendPropertyChanging("Asignaturas");
            entity.Profesor = this;
        }
    
        private void detach_Asignaturas(Asignatura entity)
        {
            this.SendPropertyChanging("Asignaturas");
            entity.Profesor = null;
        }
    }


    /// <summary>
    /// There are no comments for Materia in the schema.
    /// </summary>
    [Table(Name = @"SCHOOL.MATERIA")]
    public partial class Materia : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);

        private string _Codigo;

        private string _Titulo;

        private string _Area;

        private EntitySet<Asignatura> _Asignaturas;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnCodigoChanging(string value);
        partial void OnCodigoChanged();
        partial void OnTituloChanging(string value);
        partial void OnTituloChanged();
        partial void OnAreaChanging(string value);
        partial void OnAreaChanged();
        #endregion

        public Materia()
        {
            this._Asignaturas = new EntitySet<Asignatura>(new Action<Asignatura>(this.attach_Asignaturas), new Action<Asignatura>(this.detach_Asignaturas));
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for Codigo in the schema.
        /// </summary>
        [Column(Name = @"CODIGO", Storage = "_Codigo", CanBeNull = false, DbType = "VARCHAR2(16) NOT NULL", IsPrimaryKey = true)]
        public string Codigo
        {
            get
            {
                return this._Codigo;
            }
            set
            {
                if (this._Codigo != value)
                {
                    this.OnCodigoChanging(value);
                    this.SendPropertyChanging();
                    this._Codigo = value;
                    this.SendPropertyChanged("Codigo");
                    this.OnCodigoChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Titulo in the schema.
        /// </summary>
        [Column(Name = @"TITULO", Storage = "_Titulo", CanBeNull = false, DbType = "VARCHAR2(64) NOT NULL")]
        public string Titulo
        {
            get
            {
                return this._Titulo;
            }
            set
            {
                if (this._Titulo != value)
                {
                    this.OnTituloChanging(value);
                    this.SendPropertyChanging();
                    this._Titulo = value;
                    this.SendPropertyChanged("Titulo");
                    this.OnTituloChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Area in the schema.
        /// </summary>
        [Column(Name = @"AREA", Storage = "_Area", DbType = "VARCHAR2(64) NULL")]
        public string Area
        {
            get
            {
                return this._Area;
            }
            set
            {
                if (this._Area != value)
                {
                    this.OnAreaChanging(value);
                    this.SendPropertyChanging();
                    this._Area = value;
                    this.SendPropertyChanged("Area");
                    this.OnAreaChanged();
                }
            }
        }

        [Devart.Data.Linq.Mapping.Association(Name="Materia_Asignatura", Storage="_Asignaturas", OtherKey="MateriaCod")]
        public EntitySet<Asignatura> Asignaturas
        {
            get
            {
                return this._Asignaturas;
            }
            set
            {
                this._Asignaturas.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_Asignaturas(Asignatura entity)
        {
            this.SendPropertyChanging("Asignaturas");
            entity.Materia = this;
        }
    
        private void detach_Asignaturas(Asignatura entity)
        {
            this.SendPropertyChanging("Asignaturas");
            entity.Materia = null;
        }
    }
}
